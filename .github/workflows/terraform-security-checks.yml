name: Terraform Security Checks

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '*.tf'
      - '*.tfvars'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  terraform-security:
    name: Terraform Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        
    - name: Terraform Format Check
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true
      
    - name: Terraform Init
      run: |
        cd environments/dev
        terraform init -backend=false
        
    - name: Terraform Validate
      run: |
        cd environments/dev
        terraform validate
        
    - name: Terraform Init (Prod)
      run: |
        cd environments/prod
        terraform init -backend=false
        
    - name: Terraform Validate (Prod)
      run: |
        cd environments/prod
        terraform validate
        
    - name: TFSec Security Scan (Dev)
      run: |
        cd environments/dev
        tfsec . --format sarif --out tfsec-results-dev.sarif || true
        
    - name: TFSec Security Scan (Prod)
      run: |
        cd environments/prod
        tfsec . --format sarif --out tfsec-results-prod.sarif || true
        
    - name: Upload TFSec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('environments/dev/tfsec-results-dev.sarif') != ''
      with:
        sarif_file: environments/dev/tfsec-results-dev.sarif
        
    - name: Upload TFSec results to GitHub Security tab (Prod)
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('environments/prod/tfsec-results-prod.sarif') != ''
      with:
        sarif_file: environments/prod/tfsec-results-prod.sarif
        
    - name: Comment PR with TFSec results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          try {
            const fs = require('fs');
            const path = require('path');
            
            // Read TFSec results
            const devResults = fs.existsSync('environments/dev/tfsec-results-dev.sarif') 
              ? JSON.parse(fs.readFileSync('environments/dev/tfsec-results-dev.sarif', 'utf8'))
              : null;
            const prodResults = fs.existsSync('environments/prod/tfsec-results-prod.sarif') 
              ? JSON.parse(fs.readFileSync('environments/prod/tfsec-results-prod.sarif', 'utf8'))
              : null;
              
            let comment = '## ðŸ”’ Terraform Security Scan Results\n\n';
            
            if (devResults && devResults.runs && devResults.runs[0].results.length > 0) {
              comment += '### Dev Environment Issues:\n';
              devResults.runs[0].results.forEach(result => {
                comment += `- **${result.ruleId}**: ${result.message.text}\n`;
              });
            }
            
            if (prodResults && prodResults.runs && prodResults.runs[0].results.length > 0) {
              comment += '\n### Prod Environment Issues:\n';
              prodResults.runs[0].results.forEach(result => {
                comment += `- **${result.ruleId}**: ${result.message.text}\n`;
              });
            }
            
            if ((!devResults || !devResults.runs || devResults.runs[0].results.length === 0) && 
                (!prodResults || !prodResults.runs || prodResults.runs[0].results.length === 0)) {
              comment += 'âœ… No security issues found!';
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not create PR comment:', error.message);
            console.log('This is expected if the workflow does not have permission to comment on PRs');
          }
